From cbdecbcd01dc6670b29433b7c0de68d2c10b36a0 Mon Sep 17 00:00:00 2001
From: Birkir Gudjonsson <birkir.gudjonsson@gmail.com>
Date: Tue, 28 Nov 2017 15:44:21 -0500
Subject: [PATCH] Search

---
 ios/RCCNavigationController.m | 27 ++++++++++++++++++
 ios/RCCViewController.m       | 66 ++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 92 insertions(+), 1 deletion(-)

diff --git a/ios/RCCNavigationController.m b/ios/RCCNavigationController.m
index bbf0e53..173da7d 100755
--- a/ios/RCCNavigationController.m
+++ b/ios/RCCNavigationController.m
@@ -356,6 +356,33 @@ NSString const *CALLBACK_ASSOCIATED_ID = @"RCCNavigationController.CALLBACK_ASSO
       [parent updateStyle];
     }
   }
+
+  // toggleSearch
+  if ([performAction isEqualToString:@"setSearch"]) {
+    if ([self.topViewController isKindOfClass:[RCCViewController class]]) {
+      RCCViewController *topViewController = (RCCViewController*)self.topViewController;
+      UISearchController *search = topViewController.navigationItem.searchController;
+      if (search != nil) {
+        NSString *placeholder = actionParams[@"placeholder"];
+        NSString *query = actionParams[@"query"];
+        NSString *active = actionParams[@"active"];
+        NSString *blur = actionParams[@"blur"];
+        if (placeholder) {
+          [search.searchBar setPlaceholder:placeholder];
+        }
+        if (query) {
+          [search.searchBar setText:query];
+        }
+        if (active) {
+          BOOL activeBool = active ? [active boolValue] : NO;
+          [search setActive:activeBool];
+        }
+        if (blur) {
+          [search.searchBar resignFirstResponder];
+        }
+      }
+    }
+  }
 }

 -(void)onButtonPress:(UIBarButtonItem*)barButtonItem
diff --git a/ios/RCCViewController.m b/ios/RCCViewController.m
index 5508075..8c9eba3 100755
--- a/ios/RCCViewController.m
+++ b/ios/RCCViewController.m
@@ -19,11 +19,12 @@ const NSInteger BLUR_STATUS_TAG = 78264801;
 const NSInteger BLUR_NAVBAR_TAG = 78264802;
 const NSInteger TRANSPARENT_NAVBAR_TAG = 78264803;

-@interface RCCViewController() <UIGestureRecognizerDelegate, UIViewControllerPreviewingDelegate>
+@interface RCCViewController() <UIGestureRecognizerDelegate, UIViewControllerPreviewingDelegate, UISearchDisplayDelegate, UISearchControllerDelegate>
 @property (nonatomic) BOOL _hidesBottomBarWhenPushed;
 @property (nonatomic) BOOL _statusBarHideWithNavBar;
 @property (nonatomic) BOOL _statusBarHidden;
 @property (nonatomic) BOOL _statusBarTextColorSchemeLight;
+@property (nonatomic) BOOL _hideNavBarBorder;
 @property (nonatomic, strong) NSDictionary *originalNavBarImages;
 @property (nonatomic, strong) UIImageView *navBarHairlineImageView;
 @property (nonatomic, weak) id <UIGestureRecognizerDelegate> originalInteractivePopGestureDelegate;
@@ -312,6 +313,9 @@ const NSInteger TRANSPARENT_NAVBAR_TAG = 78264803;
   [self sendGlobalScreenEvent:@"didAppear" endTimestampString:[self getTimestampString] shouldReset:YES];
   [self sendScreenChangedEvent:@"didAppear"];

+  if (self._hideNavBarBorder) {
+    [self hideHairlineSubviews:self.navigationController.view];
+  }
 }

 - (void)viewWillAppear:(BOOL)animated
@@ -627,12 +631,35 @@ const NSInteger TRANSPARENT_NAVBAR_TAG = 78264803;

   NSNumber *removeNavBarBorder = self.navigatorStyle[@"navBarNoBorder"];
   BOOL removeNavBarBorderBool = removeNavBarBorder ? [removeNavBarBorder boolValue] : NO;
+  self._hideNavBarBorder = removeNavBarBorderBool;
   if (removeNavBarBorderBool) {
     self.navBarHairlineImageView.hidden = YES;
   } else {
     self.navBarHairlineImageView.hidden = NO;
   }

+  // Search controller
+  NSString *navBarSearch = self.navigatorStyle[@"navBarSearch"];
+  BOOL navBarSearchBool = navBarSearch ? [navBarSearch boolValue] : NO;
+  if ([self.navigationItem respondsToSelector:@selector(setSearchController:)] && navBarSearchBool) {
+    UISearchController *search;
+    if (self.navigationItem.searchController == nil) {
+      search = [[UISearchController alloc] initWithSearchResultsController:nil];
+      search.searchResultsUpdater = self;
+      search.searchBar.delegate = self;
+      NSString *navBarHiddenOnSearch = self.navigatorStyle[@"navBarHiddenOnSearch"];
+      BOOL navBarHiddenOnSearchBool = navBarHiddenOnSearch ? [navBarHiddenOnSearch boolValue] : YES;
+      search.hidesNavigationBarDuringPresentation = navBarHiddenOnSearchBool;
+      search.obscuresBackgroundDuringPresentation = YES;
+      search.dimsBackgroundDuringPresentation = NO;
+      [self.navigationItem setSearchController:search];
+    } else {
+      search = self.navigationItem.searchController;
+    }
+  } else if ([self.navigationItem respondsToSelector:@selector(setSearchController:)]) {
+    [self.navigationItem setSearchController:nil];
+  }
+
  //Bug fix: in case there is a interactivePopGestureRecognizer, it prevents react-native from getting touch events on the left screen area that the gesture handles
  //overriding the delegate of the gesture prevents this from happening while keeping the gesture intact (another option was to disable it completely by demand)
  if(self.navigationController.viewControllers.count > 1){
@@ -775,6 +802,17 @@ const NSInteger TRANSPARENT_NAVBAR_TAG = 78264803;
   return nil;
 }

+- (void)hideHairlineSubviews:(UIView *)view {
+  NSArray *subviews = [view subviews];
+  if ([subviews count] == 0) return;
+  for (UIView *subview in subviews) {
+    if ([subview isKindOfClass:UIImageView.class] && subview.bounds.size.height == 0.5) {
+      subview.hidden = YES;
+    }
+    [self hideHairlineSubviews:subview];
+  }
+}
+
 -(void)addExternalVCIfNecessary:(NSDictionary*)props
 {
   NSString *externalScreenClass = props[@"externalNativeScreenClass"];
@@ -906,4 +944,30 @@ const NSInteger TRANSPARENT_NAVBAR_TAG = 78264803;
   return actions;
 }

+#pragma mark â€“ UISearchControllerDelegate & UISearchResultsDelegate
+-(void)updateSearchResultsForSearchController:(UISearchController *)searchController {
+  NSString *searchString = searchController.searchBar.text;
+  if ([self.view isKindOfClass:[RCTRootView class]]){
+    RCTRootView *rootView = (RCTRootView *)self.view;
+    if (rootView.appProperties && rootView.appProperties[@"navigatorEventID"]) {
+      [[[RCCManager sharedInstance] getBridge].eventDispatcher sendAppEventWithName:rootView.appProperties[@"navigatorEventID"] body:@{
+        @"type": @"SearchChanged",
+        @"payload": @{
+          @"query": searchString,
+          @"active": @(searchController.active)
+        }
+      }];
+    }
+  }
+}
+
+- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar {
+  if ([self.view isKindOfClass:[RCTRootView class]]){
+    RCTRootView *rootView = (RCTRootView *)self.view;
+    if (rootView.appProperties && rootView.appProperties[@"navigatorEventID"]) {
+      [[[RCCManager sharedInstance] getBridge].eventDispatcher sendAppEventWithName:rootView.appProperties[@"navigatorEventID"] body:@{ @"type": @"SearchSubmit" }];
+    }
+  }
+}
+
 @end
--
2.6.1
